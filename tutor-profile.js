(function () {
  const LANGUAGE_OPTIONS = ['English','Arabic','Bengali','Gujarati','Hindi','Polish','Punjabi','Urdu','Other'];
  const SUBJECT_OPTIONS = ['Mathematics','English','Science','Physics','Chemistry','Biology','History','Geography','French','Spanish','German','Computer Science','Art','Music','Economics','Psychology','Philosophy','Business Studies','Accounting','Law'];
  const LEVEL_OPTIONS = ['KS3 (Years 7-9)','GCSE (Years 10-11)','A-Level (Years 12-13)','University','Adult Learning'];
  const $ = (s)=>document.querySelector(s); const $$=(s)=>Array.from(document.querySelectorAll(s));
  let editMode=false, profile=null, originalProfile=null, user=null, preferencesMode=false;

  function showToast(message, type='success'){ let t=document.getElementById('toast'); if(!t){ t=document.createElement('div'); t.id='toast'; t.setAttribute('role','status'); t.setAttribute('aria-live','polite'); Object.assign(t.style,{position:'fixed',right:'16px',bottom:'16px',padding:'10px 14px',borderRadius:'10px',zIndex:'1000'}); document.body.appendChild(t);} t.style.background= type==='error' ? 'rgba(245,158,11,0.28)' : 'rgba(16,185,129,0.2)'; t.style.border='1px solid rgba(255,255,255,0.15)'; t.style.color='#fff'; t.textContent=message; t.style.display='block'; setTimeout(()=>{ if(t) t.style.display='none'; },2500);}
  function initialsFrom(name,email){ const src=(name||email||'').trim(); if(!src) return 'Y'; const p=src.split(/\s+/).filter(Boolean); return (p.length>1?(p[0][0]+p[1][0]):p[0].slice(0,2)).toUpperCase(); }
  function isGoogleProvider(u){ return (u?.providerData||[]).some(p=>p?.providerId==='google.com'); }
  function setDisabled(dis){ ['displayName','bio','timezone','hourlyRate'].forEach(id=>{ const el=document.getElementById(id); if(el) el.disabled=dis; }); $$('#notifications-card input[type="checkbox"]').forEach(cb=>cb.disabled=dis); $$('input[name="examBoards"], input[name="yearGroups"], input[name="modality"], #acceptingNewStudents').forEach(el=>el.disabled=dis); const lang=document.getElementById('languages'); if(lang) lang.querySelectorAll('button').forEach(b=>b.disabled=dis); }
  function toggleEditMode(on){ editMode=on; setDisabled(!on); const bar=$('#save-bar'); if(bar) bar.style.display=on?'block':'none'; const btn=$('#edit-profile-btn'); if(btn) btn.style.display=on?'none':'inline-flex'; }
  function togglePreferencesMode(on){ preferencesMode=on; const card=$('#teachingPreferencesCard'); if(card) card.style.display=on?'block':'none'; }

  function buildTimezoneOptions(){ const tz=$('#timezone'); if(!tz) return; const browserTz=Intl.DateTimeFormat().resolvedOptions().timeZone||'Europe/London'; const list=['Europe/London','Europe/Dublin','Europe/Paris','Europe/Berlin','Europe/Madrid','Europe/Rome','Europe/Amsterdam','Europe/Stockholm','Europe/Warsaw','Africa/Cairo','Africa/Nairobi','Asia/Dubai','Asia/Kolkata','Asia/Dhaka','Asia/Singapore','Asia/Tokyo','America/New_York','America/Chicago','America/Denver','America/Los_Angeles']; tz.innerHTML=''; list.forEach(x=>{ const o=document.createElement('option'); o.value=x; o.textContent=x; tz.appendChild(o); }); if(!list.includes(browserTz)){ const o=document.createElement('option'); o.value=browserTz; o.textContent=browserTz; tz.appendChild(o); } }
  function makeChip(label, selected, onToggle){ const b=document.createElement('button'); b.type='button'; b.className='nav-btn secondary'; Object.assign(b.style,{padding:'6px 10px',borderRadius:'999px',fontSize:'12px'}); b.textContent=label; const set=(s)=>{ b.dataset.selected=String(!!s); b.style.background=s?'var(--primary)':'rgba(255,255,255,0.1)'; b.style.borderColor='rgba(255,255,255,0.2)'; b.style.color='#fff'; }; set(selected); b.addEventListener('click',()=>{ const n=b.dataset.selected!=='true'; set(n); onToggle(n); }); return b; }
  function renderLanguages(selected=[]){ const wrap=$('#languages'); if(!wrap) return; wrap.innerHTML=''; LANGUAGE_OPTIONS.forEach(lang=>{ const chip=makeChip(lang, selected.includes(lang), (on)=>{ const i=profile.languages.indexOf(lang); if(on&&i===-1) profile.languages.push(lang); if(!on&&i!==-1) profile.languages.splice(i,1); validate(); }); chip.disabled=!editMode; wrap.appendChild(chip); }); }
  function renderSubjects(subjects=[]){ const grid=$('#subjectsGrid'); if(!grid) return; grid.innerHTML=''; subjects.forEach((subj,idx)=>{ const div=document.createElement('div'); div.className='subject-item'; div.innerHTML=`<div class="subject-info"><div class="subject-name">${subj.subject}</div><div class="subject-level">${subj.level}</div></div><button class="remove-subject" onclick="removeSubject(${idx})"><i class="fas fa-times"></i></button>`; grid.appendChild(div); }); }
  function renderAvailability(availability={}){ const grid=$('#availabilityGrid'); if(!grid) return; const days=['Mon','Tue','Wed','Thu','Fri','Sat','Sun']; const times=['9:00','10:00','11:00','12:00','13:00','14:00','15:00','16:00','17:00','18:00','19:00','20:00']; grid.innerHTML=''; days.forEach(day=>{ const col=document.createElement('div'); col.className='day-column'; col.innerHTML=`<div class="day-header">${day}</div>`; times.forEach(time=>{ const slot=document.createElement('div'); slot.className='time-slot'; slot.textContent=time; if(availability[day]&&availability[day].includes(time)) slot.classList.add('selected'); slot.addEventListener('click',()=>{ if(!availability[day]) availability[day]=[]; const idx=availability[day].indexOf(time); if(idx===-1){ availability[day].push(time); slot.classList.add('selected'); } else { availability[day].splice(idx,1); slot.classList.remove('selected'); } profile.teachingPreferences.availability=availability; }); col.appendChild(slot); }); grid.appendChild(col); }); }

  function bindInputs(){ const d=$('#displayName'); const b=$('#bio'); const t=$('#timezone'); d&&d.addEventListener('input',()=>{ profile.displayName=d.value.trim(); validate(); }); b&&b.addEventListener('input',()=>{ profile.bio=b.value.trim(); const h=$('#bio-help'); if(h) h.textContent=`${profile.bio.length}/280`; validate(); }); t&&t.addEventListener('change',()=>{ profile.timezone=t.value; validate(); }); }
  function isDirty(){ return JSON.stringify(profile)!==JSON.stringify(originalProfile); }
  function validate(){ let valid=true; const setErr=(id,msg)=>{ const el=document.getElementById(id); const help=document.getElementById(id+'-help'); if(el) el.setAttribute('aria-invalid', msg?'true':'false'); if(help) help.textContent=msg||''; if(msg) valid=false; }; if(!profile.displayName||profile.displayName.trim().length<2) setErr('displayName','Please enter 2–50 characters.'); else if(profile.displayName.length>50) setErr('displayName','Max 50 characters.'); else setErr('displayName',''); if(profile.bio&&profile.bio.length>280) setErr('bio','Bio must be 280 characters or fewer.'); else setErr('bio',''); if(!Array.isArray(profile.languages)) profile.languages=[]; const lh=$('#languages-help'); if(profile.languages.length===0){ lh&&(lh.textContent='Choose at least one language.'); valid=false; } else if(profile.languages.length>5){ lh&&(lh.textContent='Choose up to 5 languages.'); valid=false; } else if(lh) lh.textContent=''; const save=$('#save-profile-btn'); if(save) save.disabled=!valid || !isDirty(); return valid; }

  function updateOverview(){ const dn=$('#profile-displayName'); dn&&(dn.textContent=profile.displayName||'—'); const email=user?.email||profile.email||''; const em=$('#profile-email'); if(em){ em.textContent=email; em.title=email; } const verified=(user&&user.emailVerified)||isGoogleProvider(user); const badge=$('#email-badge'); badge&&(badge.style.display=verified?'inline-block':'none'); const resend=$('#resend-verification'); resend&&(resend.style.display=verified?'none':'inline-flex'); const created=profile.createdAt?.toDate?profile.createdAt.toDate():(user?.metadata?.creationTime?new Date(user.metadata.creationTime):null); const ms=$('#member-since'); ms&&(ms.textContent=created?`Member since ${created.toLocaleDateString('en-GB',{month:'long',year:'numeric'})}`:'Member since —'); const av=$('#avatar'); av&&(av.textContent=initialsFrom(profile.displayName,email)); }
  function populate(){ const d=$('#displayName'); d&&(d.value=profile.displayName||''); const b=$('#bio'); b&&(b.value=profile.bio||''); const t=$('#timezone'); t&&(t.value=profile.timezone||Intl.DateTimeFormat().resolvedOptions().timeZone||'Europe/London'); renderLanguages(profile.languages||[]); const n=profile.notifications||{messages:{inApp:true,email:true},homework:{inApp:true,email:true},sessions:{inApp:true,email:true}}; const map={'notif-messages-inapp':!!n.messages.inApp,'notif-messages-email':!!n.messages.email,'notif-homework-inapp':!!n.homework.inApp,'notif-homework-email':!!n.homework.email,'notif-sessions-inapp':!!n.sessions.inApp,'notif-sessions-email':!!n.sessions.email}; Object.entries(map).forEach(([id,val])=>{ const el=document.getElementById(id); el&&(el.checked=val); }); populatePreferences(); updateOverview(); }
  function populatePreferences(){ const prefs=profile.teachingPreferences||{}; renderSubjects(prefs.subjects||[]); const rate=$('#hourlyRate'); rate&&(rate.value=prefs.hourlyRate||25); const accepting=$('#acceptingNewStudents'); accepting&&(accepting.checked=!!prefs.acceptingNewStudents); (prefs.examBoards||[]).forEach(board=>{ const el=document.querySelector(`input[name="examBoards"][value="${board}"]`); el&&(el.checked=true); }); (prefs.yearGroups||[]).forEach(group=>{ const el=document.querySelector(`input[name="yearGroups"][value="${group}"]`); el&&(el.checked=true); }); if(prefs.modality){ const el=document.querySelector(`input[name="modality"][value="${prefs.modality}"]`); el&&(el.checked=true); } renderAvailability(prefs.availability||{}); const hasPrefs=prefs.subjects&&prefs.subjects.length>0; togglePreferencesMode(hasPrefs); }

  function renderProviders(){ const chips=$('#provider-chips'); if(!chips) return; chips.innerHTML=''; const hasPassword=(user?.providerData||[]).some(p=>p.providerId==='password'); const hasGoogle=isGoogleProvider(user); const chip=(l)=>{ const s=document.createElement('span'); s.className='nav-btn secondary'; s.style.cursor='default'; s.style.padding='6px 10px'; s.textContent=l; return s; }; if(hasPassword) chips.appendChild(chip('Email & password')); if(hasGoogle) chips.appendChild(chip('Google')); const cp=$('#change-password-btn'); cp&&(cp.style.display=hasPassword?'inline-flex':'none'); const lg=$('#link-google-btn'); lg&&(lg.style.display=hasGoogle?'none':'inline-flex'); const ug=$('#unlink-google-btn'); ug&&(ug.style.display=hasGoogle?'inline-flex':'none'); }

  async function saveProfile(){ if(!validate()) return; const ref=Auth.db.collection('users').doc(user.uid); const now=firebase.firestore.FieldValue.serverTimestamp(); const allowed={ email: profile.email || user?.email || null, displayName: profile.displayName || null, role: 'tutor', bio: profile.bio || null, timezone: profile.timezone, languages: profile.languages || [], notifications: profile.notifications || {}, teachingPreferences: profile.teachingPreferences || {}, provider: isGoogleProvider(user)?'google':'password', updatedAt: now }; $$('button, input, select, textarea').forEach(el=>el.disabled=true); const save=$('#save-profile-btn'); if(save) save.textContent='Saving…'; try{ await ref.set(allowed,{merge:true}); originalProfile=JSON.parse(JSON.stringify(profile)); save&&(save.disabled=true); showToast('Profile updated.'); toggleEditMode(false); } catch(e){ console.error(e); showToast("Couldn't save profile.",'error'); } finally { $$('button, input, select, textarea').forEach(el=>el.disabled=false); if(save) save.textContent='Save'; } }
  async function savePreferences(){ const prefs=profile.teachingPreferences||{}; prefs.hourlyRate=parseInt($('#hourlyRate')?.value)||25; prefs.acceptingNewStudents=!!$('#acceptingNewStudents')?.checked; prefs.examBoards=Array.from($$('input[name="examBoards"]:checked')).map(el=>el.value); prefs.yearGroups=Array.from($$('input[name="yearGroups"]:checked')).map(el=>el.value); const modalityEl=document.querySelector('input[name="modality"]:checked'); prefs.modality=modalityEl?.value||'online'; profile.teachingPreferences=prefs; await saveProfile(); showToast('Teaching preferences saved.'); }

  function ensureModal(){ let c=$('#modal-root'); if(!c){ c=document.createElement('div'); c.id='modal-root'; document.body.appendChild(c);} return c; } function closeModal(){ const c=$('#modal-root'); if(c) c.innerHTML=''; }
  function openPasswordModal(){ const c=ensureModal(); c.innerHTML=`<div style="position:fixed; inset:0; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1000;"><div class="dashboard-card" style="width:100%; max-width:420px;"><div class="card-header"><div class="card-icon progress"><i class="fas fa-key"></i></div><div><h3 class="card-title">Change password</h3></div></div><div><label style="color:#fff; font-weight:600;">Current password</label><input id="cur-pass" type="password" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><label style="color:#fff; font-weight:600; margin-top:12px; display:block;">New password</label><input id="new-pass" type="password" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><div style="display:flex; gap:8px; justify-content:flex-end; margin-top:12px;"><button class="nav-btn secondary" type="button" id="cancel-pass">Cancel</button><button id="confirm-pass-btn" class="nav-btn primary" type="button">Update</button></div></div></div></div>`; $('#cancel-pass')?.addEventListener('click', closeModal); $('#confirm-pass-btn')?.addEventListener('click', async ()=>{ const current=$('#cur-pass')?.value; const next=$('#new-pass')?.value; if(!current||!next||next.length<8){ showToast('Please enter your current password and a new password (min 8 chars).','error'); return;} try{ const cred=firebase.auth.EmailAuthProvider.credential(user.email,current); await user.reauthenticateWithCredential(cred); await user.updatePassword(next); showToast('Password updated.'); closeModal(); }catch(e){ console.error(e); showToast("Couldn't update password.",'error'); } }); }
  function openEmailModal(){ const c=ensureModal(); c.innerHTML=`<div style="position:fixed; inset:0; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1000;"><div class="dashboard-card" style="width:100%; max-width:420px;"><div class="card-header"><div class="card-icon subjects"><i class="fas fa-at"></i></div><div><h3 class="card-title">Change email</h3></div></div><div><label style="color:#fff; font-weight:600;">Password</label><input id="reauth-pass" type="password" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><label style="color:#fff; font-weight:600; margin-top:12px; display:block;">New email</label><input id="new-email" type="email" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><div style="display:flex; gap:8px; justify-content:flex-end; margin-top:12px;"><button class="nav-btn secondary" type="button" id="cancel-email">Cancel</button><button id="confirm-email-btn" class="nav-btn primary" type="button">Update</button></div></div></div></div>`; $('#cancel-email')?.addEventListener('click', closeModal); $('#confirm-email-btn')?.addEventListener('click', async ()=>{ const pwd=$('#reauth-pass')?.value; const newEmail=($('#new-email')?.value||'').trim(); if(!pwd||!newEmail){ showToast('Please enter your password and new email.','error'); return;} try{ const cred=firebase.auth.EmailAuthProvider.credential(user.email,pwd); await user.reauthenticateWithCredential(cred); await user.updateEmail(newEmail); showToast('Email updated.'); await Auth.db.collection('users').doc(user.uid).set({ email:newEmail, updatedAt: firebase.firestore.FieldValue.serverTimestamp() },{ merge:true }); await user.sendEmailVerification(); profile.email=newEmail; updateOverview(); closeModal(); }catch(e){ console.error(e); showToast("Couldn't update email.",'error'); } }); }
  async function linkGoogle(){ try{ const { GoogleAuthProvider, linkWithPopup } = await import('https://www.gstatic.com/firebasejs/10.12.4/firebase-auth.js'); const provider = new GoogleAuthProvider(); await linkWithPopup(user, provider); renderProviders(); showToast('Google linked.'); updateOverview(); } catch(e){ if(e?.code==='auth/credential-already-in-use') showToast('That Google account is already linked to another profile.','error'); else showToast("Couldn't link Google.",'error'); } }
  async function unlinkGoogle(){ try{ await user.unlink('google.com'); renderProviders(); showToast('Google unlinked.'); }catch(e){ showToast("Couldn't unlink Google.",'error'); } }
  function openDeleteModal(){ const c=ensureModal(); c.innerHTML=`<div style="position:fixed; inset:0; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1000;"><div class="dashboard-card" style="width:100%; max-width:420px;"><div class="card-header"><div class="card-icon" style="background:linear-gradient(135deg,#f59e0b,#ef4444);"><i class="fas fa-exclamation-triangle"></i></div><div><h3 class="card-title">Delete account</h3></div></div><div><p>Type DELETE to permanently delete your account. This cannot be undone.</p><input id="confirm-delete-text" type="text" placeholder="DELETE" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><label style="color:#fff; font-weight:600; margin-top:12px; display:block;">Password (for security)</label><input id="confirm-delete-pass" type="password" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;"><div style="display:flex; gap:8px; justify-content:flex-end; margin-top:12px;"><button class="nav-btn secondary" type="button" id="cancel-del">Cancel</button><button id="confirm-delete-btn" class="nav-btn primary" type="button">Delete</button></div></div></div></div>`; $('#cancel-del')?.addEventListener('click', closeModal); $('#confirm-delete-btn')?.addEventListener('click', async ()=>{ const text=($('#confirm-delete-text')?.value||'').trim(); const pwd=$('#confirm-delete-pass')?.value; if(text!=='DELETE'){ showToast('Please type DELETE to confirm.','error'); return;} try{ const cred=firebase.auth.EmailAuthProvider.credential(user.email,pwd); await user.reauthenticateWithCredential(cred); await Auth.db.collection('users').doc(user.uid).delete().catch(()=>{}); await user.delete(); closeModal(); import('./lib/nav.js').then(({go}) => go('/')); }catch(e){ console.error(e); showToast("Couldn't delete account.",'error'); } }); }

  function bindActions(){ const logout=$('#logout-btn'); logout&&logout.addEventListener('click', async ()=>{ try{ await Auth.auth.signOut(); import('./lib/nav.js').then(({go}) => go('/')); }catch(e){} }); $('#edit-profile-btn')?.addEventListener('click',()=>{ toggleEditMode(true); validate(); }); $('#cancel-edit-btn')?.addEventListener('click',()=>{ profile=JSON.parse(JSON.stringify(originalProfile)); populate(); toggleEditMode(false); validate(); }); $('#save-profile-btn')?.addEventListener('click', saveProfile); $('#savePreferencesBtn')?.addEventListener('click', savePreferences); $('#addSubjectBtn')?.addEventListener('click', openAddSubjectModal); $('#signout-btn')?.addEventListener('click', async ()=>{ try{ await Auth.auth.signOut(); import('./lib/nav.js').then(({go}) => go('/')); }catch(e){} }); $('#resend-verification')?.addEventListener('click', async ()=>{ try{ const u=Auth.auth.currentUser; if(u && !u.emailVerified){ await u.sendEmailVerification(); showToast('Verification email sent.'); } }catch(e){ showToast("Couldn't send verification email.",'error'); } }); $('#change-password-btn')?.addEventListener('click', openPasswordModal); $('#change-email-btn')?.addEventListener('click', openEmailModal); $('#link-google-btn')?.addEventListener('click', linkGoogle); $('#unlink-google-btn')?.addEventListener('click', unlinkGoogle); $('#delete-account-btn')?.addEventListener('click', openDeleteModal); }

  async function ensureDefaultsIfMissing(ref){ const browserTz=Intl.DateTimeFormat().resolvedOptions().timeZone||'Europe/London'; const defaults={ role:'tutor', bio:null, timezone: browserTz, languages:['English'], notifications:{ messages:{inApp:true,email:true}, homework:{inApp:true,email:true}, sessions:{inApp:true,email:true} }, teachingPreferences:{ subjects:[], hourlyRate:25, acceptingNewStudents:true, examBoards:[], yearGroups:[], modality:'online', availability:{} } }; const now=firebase.firestore.FieldValue.serverTimestamp(); await ref.set({ email: user.email||null, displayName: user.displayName||null, provider: isGoogleProvider(user)?'google':'password', createdAt: now, updatedAt: now, ...defaults }, { merge:true }); }

  function attachAuth(){ Auth.auth.onAuthStateChanged(async (u)=>{ if(!u){ import('./lib/nav.js').then(({go}) => go('/')); return; } user=u; const n=$('#tutor-name'); n&&(n.textContent= u.displayName||u.email||'Tutor'); try{ const ref=Auth.db.collection('users').doc(u.uid); const snap=await ref.get(); if(!snap.exists) await ensureDefaultsIfMissing(ref); const fresh=await ref.get();        profile=Object.assign({ email:u.email||null, displayName:u.displayName||'', role:'tutor', bio:null, timezone: Intl.DateTimeFormat().resolvedOptions().timeZone||'Europe/London', languages:['English'], notifications:{ messages:{inApp:true,email:true}, homework:{inApp:true,email:true}, sessions:{inApp:true,email:true} }, teachingPreferences:{ subjects:[], hourlyRate:25, acceptingNewStudents:true, examBoards:[], yearGroups:[], modality:'online', availability:{} }, provider: isGoogleProvider(u)?'google':'password', createdAt:null, updatedAt:null }, fresh.data()||{}); originalProfile=JSON.parse(JSON.stringify(profile)); buildTimezoneOptions(); bindInputs(); renderProviders(); populate(); validate(); } catch(e){ console.error(e); showToast("Couldn't load profile.",'error'); } }); }

  function openAddSubjectModal(){ const c=ensureModal(); c.innerHTML=`<div style="position:fixed; inset:0; background:rgba(0,0,0,0.5); display:flex; align-items:center; justify-content:center; z-index:1000;"><div class="dashboard-card" style="width:100%; max-width:420px;"><div class="card-header"><div class="card-icon subjects"><i class="fas fa-book"></i></div><div><h3 class="card-title">Add Subject</h3></div></div><div><label style="color:#fff; font-weight:600;">Subject</label><select id="subject-select" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;">${SUBJECT_OPTIONS.map(s=>`<option value="${s}">${s}</option>`).join('')}</select><label style="color:#fff; font-weight:600; margin-top:12px; display:block;">Level</label><select id="level-select" style="width:100%; margin-top:8px; padding:10px 12px; border-radius:10px; border:1px solid rgba(255,255,255,0.15); background:rgba(255,255,255,0.08); color:#fff;">${LEVEL_OPTIONS.map(l=>`<option value="${l}">${l}</option>`).join('')}</select><div style="display:flex; gap:8px; justify-content:flex-end; margin-top:12px;"><button class="nav-btn secondary" type="button" id="cancel-subject">Cancel</button><button id="add-subject-btn" class="nav-btn primary" type="button">Add</button></div></div></div></div>`; $('#cancel-subject')?.addEventListener('click', closeModal); $('#add-subject-btn')?.addEventListener('click', ()=>{ const subject=$('#subject-select')?.value; const level=$('#level-select')?.value; if(subject&&level){ if(!profile.teachingPreferences) profile.teachingPreferences={}; if(!profile.teachingPreferences.subjects) profile.teachingPreferences.subjects=[]; profile.teachingPreferences.subjects.push({subject,level}); renderSubjects(profile.teachingPreferences.subjects); closeModal(); } }); }
  window.removeSubject=(idx)=>{ if(profile.teachingPreferences&&profile.teachingPreferences.subjects){ profile.teachingPreferences.subjects.splice(idx,1); renderSubjects(profile.teachingPreferences.subjects); } };
  document.addEventListener('DOMContentLoaded',()=>{ try{ buildTimezoneOptions(); bindActions(); attachAuth(); }catch(e){ console.error(e); } });
})();

